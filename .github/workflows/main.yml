# --------------------------------------------------------------------
# |  سير عمل ينفذ طلبك حرفيًا: التوكن كمدخل، بدون تثبيت.             |
# --------------------------------------------------------------------

name: 'Build and Upload PixelOS GSI (User Directed)'

on:
  workflow_dispatch:
    inputs:
      # التوكن كمدخل، كما طلبت تمامًا.
      crave_api_key:
        description: 'Your Crave.io API Key'
        required: true
      build_target:
        description: 'GSI Build Target'
        required: true
        default: 'pixelos_arm64_bgN_erofs-bp2a-userdebug'

jobs:
  build:
    name: Build using foss.crave.io
    runs-on: ubuntu-latest # نفترض أن هذا runner خاص بـ Crave ويحتوي على crave-cli

    steps:
      - name: Check-out to repository
        uses: actions/checkout@v4

      # لا يوجد أي خطوة تثبيت.
      # نستخدم crave مباشرة مع تسجيل الدخول في بداية الأمر.
      - name: 'Run Full Build and Upload Process on Crave'
        run: |
          # الأمر يبدأ بـ crave run مباشرة.
          # أضفنا crave login في البداية ليستخدم التوكن من المدخلات.
          crave run --no-patch "
            set -e
            
            # تسجيل الدخول أولاً داخل بيئة crave
            echo 'Logging into Crave.io...'
            crave login --token \"${{ github.event.inputs.crave_api_key }}\"

            # تثبيت الأدوات اللازمة
            sudo apt-get update && sudo apt-get install -y lz4
            
            echo '--- 1. Initializing & Syncing Sources ---'
            mkdir -p ~/pixelos && cd ~/pixelos
            repo init --depth=1 -u https://github.com/PixelOS-AOSP/manifest.git -b sixteen --git-lfs
            git clone https://github.com/mytja/treble_manifest.git -b pixelos-sixteen .repo/local_manifests
            repo sync -c -j$(nproc) --force-sync --no-clone-bundle --no-tags --optimized-fetch --prune

            echo '--- 2. Applying Patches & Building Treble App ---'
            if [ -d 'patches' ]; then ./patches/apply-all.sh .; fi
            if [ -d 'treble_app' ]; then cd treble_app && ./build.sh release && cd ~/pixelos; else exit 1; fi

            echo '--- 3. Setting default PHH properties (Disable Backpurse) ---'
            DEVICE_MK_PATH='device/phh/treble/base.mk'
            if [ -f \"\$DEVICE_MK_PATH\" ]; then
              echo 'PRODUCT_PROPERTY_OVERRIDES += persist.sys.phh.disable_backpurse=true' >> \$DEVICE_MK_PATH
            fi

            echo '--- 4. Setting up build environment ---'
            export USE_CCACHE=1 && export CCACHE_COMPRESS=1 && ccache -M 50G
            source build/envsetup.sh
            
            echo '--- 5. Lunching build target ---'
            lunch ${{ github.event.inputs.build_target }}

            echo '--- 6. Starting compilation ---'
            make systemimage -j$(nproc)

            echo '--- 7. Compressing with LZ4 ---'
            cd out/target/product/tdgsi_arm64_ab/
            lz4 -9 system.img system.lz4
            
            echo '--- 8. Uploading to GoFile ---'
            FILENAME='system.lz4'
            echo \"Uploading \$FILENAME to GoFile...\"
            response=\$(curl -fs -X POST -H 'Authorization: Bearer lnVDBSuzPGzPzkA3je2EIKAqIccrW4ku' -F \"file=@\$FILENAME\" https://upload.gofile.io/uploadfile)
            
            echo '========================================================'
            echo \"GoFile API Response: \$response\"
            download_page=\$(echo \"\$response\" | grep -oP '\"downloadPage\":\s*\"\K[^\"]+')
            if [ -n \"\$download_page\" ]; then
              echo \"✅ Upload Successful! Download page: \$download_page\"
            else
              echo \"❌ Upload Failed!\"
              exit 1
            fi
            echo '========================================================'
          "
