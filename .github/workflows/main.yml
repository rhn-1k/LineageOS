# --------------------------------------------------------------------
# |  سير عمل نهائي (التثبيت الرسمي): بناء PixelOS GSI ورفعه         |
# --------------------------------------------------------------------

name: 'Build and Upload PixelOS GSI (Official Install)'

on:
  workflow_dispatch:
    inputs:
      crave_api_key:
        description: 'Your Crave.io API Key'
        required: true
      build_target:
        description: 'GSI Build Target'
        required: true
        default: 'pixelos_arm64_bgN_erofs-bp2a-userdebug'

jobs:
  build_and_upload:
    name: 'Build & Upload PixelOS GSI'
    runs-on: ubuntu-latest
    timeout-minutes: 480

    steps:
      # --- *** الخطوة الجديدة: التثبيت الرسمي لـ Crave CLI عبر APT *** ---
      - name: 'Install Crave.io CLI via Official APT Repository'
        run: |
          # 1. إضافة مفتاح GPG الخاص بمستودع Crave
          curl -sS https://crave.io/api/v1/gpg-key | sudo gpg --dearmor --yes -o /usr/share/keyrings/crave.gpg
          
          # 2. إضافة مستودع Crave إلى مصادر APT
          echo "deb [signed-by=/usr/share/keyrings/crave.gpg] https://crave.io/api/v1/apt ./" | sudo tee /etc/apt/sources.list.d/crave.list
          
          # 3. تحديث قائمة الحزم وتثبيت Crave CLI
          sudo apt-get update
          sudo apt-get install -y crave-cli
          
          # 4. التحقق من التثبيت
          crave --version
          
          # 5. تسجيل الدخول باستخدام التوكن
          echo "Logging into Crave.io..."
          crave login --token "${{ github.event.inputs.crave_api_key }}"
        
      # --- *** نهاية الخطوة الجديدة *** ---

      - name: 'Run Build with Custom Default Setting'
        id: build_step
        run: |
          crave run --no-cache-upload -- \
          bash -c "
            set -e
            sudo apt-get update && sudo apt-get install -y lz4
            
            echo '--- 1. Initializing & Syncing Sources ---'
            mkdir -p ~/pixelos && cd ~/pixelos
            repo init --depth=1 -u https://github.com/PixelOS-AOSP/manifest.git -b sixteen --git-lfs
            git clone https://github.com/mytja/treble_manifest.git -b pixelos-sixteen .repo/local_manifests
            repo sync -c -j$(nproc) --force-sync --no-clone-bundle --no-tags --optimized-fetch --prune

            echo '--- 2. Applying Patches & Building Treble App ---'
            if [ -d 'patches' ]; then ./patches/apply-all.sh .; fi
            if [ -d 'treble_app' ]; then cd treble_app && ./build.sh release && cd ~/pixelos; else exit 1; fi

            echo '--- 3. Setting default PHH properties (Disable Backpurse) ---'
            DEVICE_MK_PATH='device/phh/treble/base.mk'
            if [ -f \"\$DEVICE_MK_PATH\" ]; then
              echo 'PRODUCT_PROPERTY_OVERRIDES += persist.sys.phh.disable_backpurse=true' >> \$DEVICE_MK_PATH
            fi

            echo '--- 4. Setting up build environment ---'
            export USE_CCACHE=1 && export CCACHE_COMPRESS=1 && ccache -M 50G
            source build/envsetup.sh
            
            echo '--- 5. Lunching build target ---'
            lunch ${{ github.event.inputs.build_target }}

            echo '--- 6. Starting compilation ---'
            make systemimage -j$(nproc)

            echo '--- 7. Compressing with LZ4 ---'
            cd out/target/product/tdgsi_arm64_ab/
            lz4 -9 system.img system.lz4
            
            echo '--- 8. Exporting file path ---'
            COMPRESSED_FILE_PATH=$(realpath system.lz4)
            echo \"gsi_file_path=\$COMPRESSED_FILE_PATH\" >> \$CRAVE_OUTPUTS
          "

      - name: 'Upload system.lz4 to GoFile'
        run: |
          echo "Starting upload to GoFile..."
          FILE_TO_UPLOAD="${{ steps.build_step.outputs.gsi_file_path }}"
          crave cp "$FILE_TO_UPLOAD" .
          FILENAME=$(basename "$FILE_TO_UPLOAD")
          echo "File $FILENAME copied locally. Now uploading..."
          
          response=$(curl -fs -X POST \
            -H "Authorization: Bearer lnVDBSuzPGzPzkA3je2EIKAqIccrW4ku" \
            -F "file=@$FILENAME" \
            https://upload.gofile.io/uploadfile)
            
          echo "========================================================"
          echo "GoFile API Response: $response"
          download_page=$(echo "$response" | grep -oP '"downloadPage":\s*"\K[^"]+')
          if [ -n "$download_page" ]; then
            echo "✅ Upload Successful! Your download page is: $download_page"
          else
            echo "❌ Upload Failed! Check the API response above."
            exit 1
          fi
          echo "========================================================"
