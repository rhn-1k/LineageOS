name: Samsung Firmware Checker (Smart-Switch Method)

on:
  workflow_dispatch:
    inputs:
      model:
        description: 'Device Model (e.g., SM-A155F)'
        required: true
        default: 'SM-A155F'
      region:
        description: 'Region Code / CSC (e.g., XSG, XXV, DBT)'
        required: true
        default: 'EUX' # تم تغيير القيمة الافتراضية هنا

jobs:
  check-firmware:
    runs-on: ubuntu-latest

    steps:
      - name: Check for latest firmware using Smart-Switch method
        id: check
        run: |
          MODEL="${{ github.event.inputs.model }}"
          REGION="${{ github.event.inputs.region }}"
          
          NONCE_HEADER="Content-Type: application/xml;charset=UTF-8"
          AUTH_HEADER="Authorization: FUS nonce=\"\", signature=\"\", t=\"\", type=\"\", version=\"\""
          
          echo "Requesting firmware for ${MODEL}/${REGION}..."
          
          response_xml=$(curl -s -k -X POST \
            -H "${NONCE_HEADER}" \
            -H "${AUTH_HEADER}" \
            -d "<REQUEST><FUS><SERVICE><NAME>CHECK_FIRMWARE</NAME><VERSION>2.0</VERSION></SERVICE><CLIENT><TYPE>Smart Switch</TYPE><VERSION>4.3.24033_1</VERSION></CLIENT><DEVICE><MODEL_NAME>${MODEL}</MODEL_NAME><CSC>${REGION}</CSC></DEVICE></FUS></REQUEST>" \
            "https://neofussvr.ssl.samsung.com/NF_Download.do")
            
          echo "--- Server Response ---"
          echo "${response_xml}"
          echo "-----------------------"
          
          STATUS=$(echo "${response_xml}" | grep -oP '<STATUS>\K[^<]+')
          if [ "${STATUS}" != "200" ]; then
            ERROR_MESSAGE=$(echo "${response_xml}" | grep -oP '<MESSAGE>\K[^<]+')
            echo "Error from Samsung server: ${ERROR_MESSAGE}"
            echo "url=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          LATEST_VERSION=$(echo "${response_xml}" | grep -oP '<LATEST_VERSION>\K[^<]+')
          FILE_NAME=$(echo "${response_xml}" | grep -oP '<FILE_NAME>\K[^<]+')
          FILE_SIZE=$(echo "${response_xml}" | grep -oP '<FILE_SIZE>\K[^<]+')
          
          if [ -n "${LATEST_VERSION}" ] && [ -n "${FILE_NAME}" ]; then
            DOWNLOAD_URL="http://fus.samsung.com/firmware/${FILE_NAME}"
            
            echo "Firmware found!"
            echo "Version: ${LATEST_VERSION}"
            echo "File Name: ${FILE_NAME}"
            echo "File Size: ${FILE_SIZE} bytes"
            echo "Download URL: ${DOWNLOAD_URL}"
            
            echo "url=${DOWNLOAD_URL}" >> $GITHUB_OUTPUT
            echo "filename=${FILE_NAME}" >> $GITHUB_OUTPUT
            echo "filesize=${FILE_SIZE}" >> $GITHUB_OUTPUT
          else
            echo "No firmware found for ${MODEL}/${REGION}."
            echo "url=" >> $GITHUB_OUTPUT
          fi

      - name: Download and Upload to GoFile
        if: steps.check.outputs.url != ''
        run: |
          echo "Downloading ${{ steps.check.outputs.filename }}..."
          wget -O "${{ steps.check.outputs.filename }}" "${{ steps.check.outputs.url }}"
          sync
          
          echo "Download complete. Verifying size..."
          DOWNLOADED_SIZE=$(stat -c%s "${{ steps.check.outputs.filename }}")
          EXPECTED_SIZE="${{ steps.check.outputs.filesize }}"
          
          if [ "$DOWNLOADED_SIZE" -ne "$EXPECTED_SIZE" ]; then
            echo "Error: File size mismatch! Expected ${EXPECTED_SIZE}, but got ${DOWNLOADED_SIZE}."
            exit 1
          fi
          
          echo "Uploading to GoFile..."
          response=$(curl -X POST \
            -H "Authorization: Bearer lnVDBSuzPGzPzkA3je2EIKAqIccrW4ku" \
            -F "file=@${{ steps.check.outputs.filename }}" \
            https://upload.gofile.io/uploadfile)
            
          echo "========================================================"
          echo "GoFile API Response: $response"
          download_page=$(echo "$response" | grep -oP '"downloadPage":\s*"\K[^"]+')
          echo "Your direct download page is: $download_page"
          echo "========================================================"
