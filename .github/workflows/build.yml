name: Infinity-X Flexible Builder

on:
  workflow_dispatch:
    inputs:
      crave_username:
        description: 'Your Crave.io Username'
        required: true
      crave_token:
        description: 'Your Crave.io Token'
        required: true
      device_codename:
        description: 'Device codename'
        required: true
        default: 'A155F'
      maintainer_name:
        description: 'Your name to be shown as the maintainer'
        required: true
        default: 'Rhn'
      include_gapps:
        description: 'Include Google Apps in the build?'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      has_udfps:
        description: 'Does the target device have an Under-Display Fingerprint Sensor?'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      about_phone_props:
        description: 'About Phone Properties (MarketName;SoC;Battery;Display;Camera)'
        required: false
        default: 'Galaxy A15;Helio G99;5000 mAh;1080x2340, 90hz;50MP + 5MP + 2MP'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies & Crave CLI
        run: |
          sudo apt-get update -y
          # --- السطر المصحح: استخدام أسماء الحزم الصحيحة لـ Ubuntu 22.04 ---
          sudo apt-get install -y curl git-core gnupg flex bison build-essential zip unzip zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses6 lib32ncurses-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig jq
          mkdir -p ${HOME}/bin/
          curl -s https://raw.githubusercontent.com/accupara/crave/master/get_crave.sh | bash -s --
          mv ${PWD}/crave ${HOME}/bin/
          sudo ln -sf ${HOME}/bin/crave /usr/bin/crave

      - name: Run The Build on Crave.io
        env:
          CRAVE_USERNAME: ${{ github.event.inputs.crave_username }}
          CRAVE_TOKEN: ${{ github.event.inputs.crave_token }}
          MAINTAINER: ${{ github.event.inputs.maintainer_name }}
          DEVICE: ${{ github.event.inputs.device_codename }}
          GAPPS: ${{ github.event.inputs.include_gapps }}
          UDFPS: ${{ github.event.inputs.has_udfps }}
          ABOUT_PROPS: ${{ github.event.inputs.about_phone_props }}
        run: |
          crave run --no-patch -- "
            set -e

            export INFINITY_BUILD_TYPE='UNOFFICIAL'
            export INFINITY_MAINTAINER='${MAINTAINER}'
            export TARGET_HAS_UDFPS='${UDFPS}'
            export WITH_GAPPS='${GAPPS}'
            export BUILD_VARIANT='userdebug'
            export DEVICE_CODENAME='${DEVICE}'
            export BUILD_USERNAME='${{ github.actor }}'
            export BUILD_HOSTNAME='crave'

            echo '--- Initializing & Syncing Source ---'
            repo init --depth=1 --no-repo-verify --git-lfs -u https://github.com/ProjectInfinity-X/manifest -b 15 -g default,-mips,-darwin,-notdefault
            /opt/crave/resync.sh

            echo '--- Cloning Treble Adapter for Custom Props ---'
            git clone https://github.com/ponces/treble_adapter -b master treble_adapter
            if [ -n \"\${ABOUT_PROPS}\" ]; then
              IFS=';' read -r market_name soc_name battery_info display_info camera_info <<< \"\${ABOUT_PROPS}\"
              PROPS_FILE='treble_adapter/system.prop'
              echo '--- Creating custom system properties ---'
              echo \"ro.product.marketname=\$market_name\" > \${PROPS_FILE}
              echo \"ro.infinity.soc=\$soc_name\" >> \${PROPS_FILE}
              echo \"ro.infinity.battery=\$battery_info\" >> \${PROPS_FILE}
              echo \"ro.infinity.display=\$display_info\" >> \${PROPS_FILE}
              echo \"ro.infinity.camera=\$camera_info\" >> \${PROPS_FILE}
            fi

            echo '--- Cloning & Applying Patches ---'
            git clone https://github.com/Doze-off/patches.git -b patches-15 patches
            bash patches/apply-patches.sh \$(pwd) || true
            
            echo '--- Starting Compilation ---'
            source build/envsetup.sh
            lunch infinity_\${DEVICE_CODENAME}-\${BUILD_VARIANT}
            m bacon -j\$(nproc --all)

            echo '--- Uploading ROM to GoFile ---'
            ROM_PATH=\$(find out/target/product/\${DEVICE_CODENAME}/ -name '*.zip' | head -n 1)
            if [ -z \"\$ROM_PATH\" ]; then echo '!!! ERROR: ROM file not found!'; exit 1; fi
            SERVER=\$(curl -s https://api.gofile.io/getServer | jq -r '.data.server')
            UPLOAD_RESPONSE=\$(curl -F \"file=@\$ROM_PATH\" -F \"token=E29ro0ueg1dXX7CHmJSdrO9puOTUMREk\" https://\${SERVER}.gofile.io/uploadFile)
            DOWNLOAD_LINK=\$(echo \"\$UPLOAD_RESPONSE\" | jq -r '.data.downloadPage')
            echo '======================================='
            echo '         !!! BUILD FINISHED !!!'
            echo '======================================='
            echo \"Your download link is: \${DOWNLOAD_LINK}\"
            echo '======================================='
          "
